{"version":3,"sources":["js/task1.js","js/task2.js","js/task3.js","index.js"],"names":["delay","ms","promise","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","id","logSuccess","logError","warn","amount","catch"],"mappings":";AAAA,MAAMA,EAAQC,IAMHC,OALS,IAAIC,QAAQ,CAACC,EAASC,KAClCC,WAAW,KACTF,EAAQH,IACPA,MAKLM,EAASC,GAAQC,QAAQC,sBAAsBF,OAErDR,EAAM,KAAMW,KAAKJ,GACjBP,EAAM,KAAMW,KAAKJ,GACjBP,EAAM,MAAMW,KAAKJ;;ACbjB,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,KAQ1Bf,OAPS,IAAIC,QAAQ,CAACC,EAASC,KAIpCD,EAHqBY,EAASE,IAAIC,GAChCA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,OAS7DZ,EAASa,GAAgBX,QAAQY,MAAMD,GAG7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;ACvBrC,MAAMe,EAA4B,CAACC,EAAKC,IAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,IACjB7B,MAAAA,EAAQsB,EAA0B,IAAK,KACtC,OAAA,IAAInB,QAAQ,CAACC,EAASC,KAEzBC,WAAW,KACYmB,KAAKE,SAAW,IAG/BvB,EAAQ,CAACyB,EAAYC,GAAI9B,IAG7BK,EAAOwB,EAAYC,KAEpB9B,MAMH+B,EAAa,EAAED,EAAItB,MACvBC,QAAQC,mBAAmBoB,kBAAmBtB,QAG1CwB,EAAWF,IACfrB,QAAQwB,qCAAqCH,+BAK/CF,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,KAC/BvB,KAAKoB,GACLI,MAAMH,GAETJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH;;AC7CX,aAFA,QAAA,cACA,QAAA,cACA,QAAA","file":"src.11ab8c95.js","sourceRoot":"../src","sourcesContent":["const delay = ms => {\n    const promise = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve(ms);\n        }, ms);\n    });\n    return promise;\n};\n  \nconst logger = time => console.log(`Resolved after ${time}ms`);\n\ndelay(2000).then(logger); \ndelay(1000).then(logger); \ndelay(1500).then(logger); ","const users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n  ];\n  \n  const toggleUserState = (allUsers, userName) => {\n    const promise = new Promise((resolve, reject) => {\n      const updatedUsers = allUsers.map(user =>\n        user.name === userName ? { ...user, active: !user.active } : user,\n      );\n      resolve(updatedUsers);\n    });\n    \n    return promise;\n  };\n\n\n  const logger = updatedUsers => console.table(updatedUsers);\n  \n\n  toggleUserState(users, 'Mango').then(logger);\n  toggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n  \n  const makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n    return new Promise((resolve, reject) => {\n        \n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n            \n            if (canProcess) {\n                resolve([transaction.id, delay]);\n            }\n\n            reject(transaction.id);\n        \n        }, delay);\n    });\n\n  };\n \n  \n  const logSuccess = ([id, time]) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n  };\n  \n  const logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n  };\n  \n\n\n  makeTransaction({ id: 70, amount: 150 })\n    .then(logSuccess)\n    .catch(logError);\n  \n  makeTransaction({ id: 71, amount: 230 })\n    .then(logSuccess)\n    .catch(logError);\n  \n  makeTransaction({ id: 72, amount: 75 })\n    .then(logSuccess)\n    .catch(logError);\n  \n  makeTransaction({ id: 73, amount: 100 })\n    .then(logSuccess)\n    .catch(logError);","import './js/task1';\nimport './js/task2';\nimport './js/task3';\n\n"]}